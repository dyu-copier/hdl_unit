import cocotb
from cocotb_coverage.coverage import CoverCross, CoverPoint, coverage_db
from cocotb.triggers import Timer, RisingEdge
from {{ip_name|capitalize}}.reg_model.{{ip_name|capitalize}} import {{ip_name|capitalize}}_cls
from {{ip_name|capitalize}}.lib import AsyncCallbackSet

class Env:
   def __init__(self,dut,timeout):
      self.dut=dut
      self.reg={{ip_name|capitalize}}_cls(
             callbacks=AsyncCallbackSet(
                  read_callback=self.regRead,
                  write_callback=self.regWrite))
      ifc=None # TODO set this to a default config IFC.
      self.timeout = timeout

   def test(self, override_initialization=None):
      if override_initialization is not None:
	      self.init_config=override_initialization
      self.start()
      self.initialize()
      self.run()
      self.check()

   def start(self):
      pass

   def initialize(self):
      pass

   def run(self):
      pass

   def check(self):
      pass
   async def regRead(self, addr: int, width: int, accesswidth: int):
      rv = await self.ifc.read(addr)
      cocotb.log.info(f"RegRead addr={addr:x} rdata={hex(rv.integer)}")
      return rv.integer
      pass

   async def regWrite(self, addr: int, width: int, accesswidth: int, data: int):
        cocotb.log.info(f"RegWrite, addr={hex(addr)} data={hex(data)}")
        return await self.ifc.write(addr, data)
        pass
